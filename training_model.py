import numpy as np
import pandas as pd
from keras.saving.saving_api import load_model
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import joblib
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras import regularizers
from tensorflow.keras import layers
from sklearn.metrics import classification_report
from yellowbrick.classifier import ClassificationReport
from tensorflow.keras.utils import plot_model
from sklearn.metrics import accuracy_score


def train_model_cnn(path_file, lable):
    data = pd.read_csv(dataset)  # Replace 'your_dataset.csv' with your file path

    # Assuming your dataset has features (attributes) and a target column (labels)

    X = data.drop(columns=[lable])  # Features
    X.drop(['index'], axis=1, inplace=True)
    y = data[lable]  # Target labels
    # Standardize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    # Splitting data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

    # Define the model
    model = tf.keras.Sequential([
        tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
        tf.keras.layers.Dense(32, activation='relu'),
        tf.keras.layers.Dense(16, activation='relu'),
        tf.keras.layers.Dense(5, activation='softmax')
    ])

    # Compile the model
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    # Train the model
    history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2)

    # Evaluate the model
    test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)
    print('\nTest accuracy:', test_acc)
    # Predict classes for test set
    # Predictions
    y_pred = np.argmax(model.predict(X_test), axis=-1)

    # Confusion Matrix
    conf_matrix = confusion_matrix(y_test, y_pred)
    print("\nConfusion Matrix:")
    print(conf_matrix)
    # Plot the confusion matrix
    plt.figure(figsize=(8, 6))
    sns.heatmap(conf_matrix, annot=True, fmt='g')
    plt.title('Confusion matrix')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

    # Classification Report
    class_report = classification_report(y_test, y_pred, output_dict=True)
    print("\nClassification Report:")
    print(class_report)
    # Convert the report to a data frame
    report_df = pd.DataFrame(class_report).transpose()
    # Plot the report
    plt.figure(figsize=(8, 6))
    sns.heatmap(report_df.drop(['support'], axis=1), annot=True, cmap='Blues')
    plt.title('Classification report')
    plt.show()

def train_model_random_forest_classifier(dataset, lable):
    data = pd.read_csv(dataset)  # Replace 'your_dataset.csv' with your file path

    # Assuming your dataset has features (attributes) and a target column (labels)

    X = data.drop(columns=[lable])  # Features
    X.drop(['index'], axis=1, inplace=True)
    y = data[lable]  # Target labels

    # Split the dataset into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize and train the Random Forest classifier
    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
    rf_classifier.fit(X_train, y_train)

    # Predict labels for the test set
    y_pred = rf_classifier.predict(X_test)

    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print("Accuracy:", accuracy)
    # Display confusion matrix
    conf_matrix = confusion_matrix(y_test, y_pred)
    print("Confusion Matrix:")
    print(conf_matrix)
    # Plot the confusion matrix
    plt.figure(figsize=(8, 6))
    sns.heatmap(conf_matrix, annot=True, fmt='g')
    plt.title('Confusion matrix')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

    # Display classification report
    class_report = classification_report(y_test, y_pred, output_dict=True)
    # Convert the report to a data frame
    report_df = pd.DataFrame(class_report).transpose()
    # Plot the report
    plt.figure(figsize=(8, 6))
    sns.heatmap(report_df.drop(['support'], axis=1), annot=True, cmap='Blues')
    plt.title('Classification report')
    plt.show()


if __name__ == '__main__':
    lable = "label"
    dataset = "android_malware_dataset.csv"
    # train_model_random_forest_classifier(dataset, lable)
    train_model_cnn(dataset,lable)
